{% extends 'base.html.twig' %}

{% block title %}Annonces{% endblock %}

{% block body %}
<div class="container mx-auto p-4">
    {% for message in app.flashes('success') %}
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4" role="alert">
            <span class="block sm:inline">{{ message }}</span>
        </div>
    {% endfor %}

    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold">Liste des Annonces</h1>
        
        {% if app.user %}
            <a href="{{ path('app_annonce_creer') }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Ajouter une annonce
            </a>
        {% endif %}
    </div>

    {% if produits is empty %}
        <div class="bg-gray-100 p-8 rounded-lg text-center">
            <p class="text-gray-600 text-lg">Aucune annonce disponible pour le moment.</p>
            {% if app.user %}
                <p class="text-gray-500 mt-2">Soyez le premier √† publier une annonce !</p>
            {% endif %}
        </div>
    {% else %}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {% for produit in produits %}
                <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300">
                    {% if produit.images is not empty %}
                        <div class="relative h-48 bg-gray-200">
                            <img src="/uploads/images/{{ produit.images[0] }}" 
                                 alt="{{ produit.nom }}" 
                                 class="w-full h-full object-cover">
                            {% if produit.images|length > 1 %}
                                <div class="absolute top-2 right-2 bg-black bg-opacity-50 text-white px-2 py-1 rounded text-xs">
                                    +{{ produit.images|length - 1 }}
                                </div>
                            {% endif %}
                        </div>
                    {% else %}
                        <div class="h-48 bg-gray-200 flex items-center justify-center">
                            <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                      d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                            </svg>
                        </div>
                    {% endif %}
                    
                    <div class="p-4">
                        <h3 class="text-lg font-semibold mb-2 text-gray-800 line-clamp-2">{{ produit.nom }}</h3>
                        
                        <div class="mb-3">
                            <span class="text-xl font-bold text-blue-600">{{ produit.prixInitial|number_format(2, ',', ' ') }} ‚Ç¨</span>
                        </div>

                        <div class="mb-3">
                            {% if produit.etat %}
                                <span class="inline-block bg-green-100 text-green-800 rounded-full px-2 py-1 text-xs font-semibold">
                                    {{ produit.etat.libelle }}
                                </span>
                            {% endif %}
                        </div>

                        {% if produit.produitCategories is not empty %}
                            <div class="mb-3">
                                <div class="flex flex-wrap gap-1">
                                    {% for produitCategorie in produit.produitCategories|slice(0, 2) %}
                                        <span class="inline-block bg-blue-100 text-blue-800 rounded-full px-2 py-1 text-xs font-semibold">
                                            {{ produitCategorie.categorie.libelle }}
                                        </span>
                                    {% endfor %}
                                    {% if produit.produitCategories|length > 2 %}
                                        <span class="text-xs text-gray-500">+{{ produit.produitCategories|length - 2 }}</span>
                                    {% endif %}
                                </div>
                            </div>
                        {% endif %}

                        <div class="mb-4">
                            <p class="text-gray-600 text-sm">
                                {{ produit.description|length > 80 ? produit.description|slice(0, 80) ~ '...' : produit.description }}
                            </p>
                        </div>

                        <div class="flex justify-between items-center">
                            <a href="{{ path('app_annonce_details', {'id': produit.id}) }}" 
                               class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm transition-colors">
                                Voir d√©tails
                            </a>
                            
                            {% if app.user and api_favoris_disponible() %}
                                <button class="favori-btn ml-2 p-2 rounded-full transition-all duration-300 {% if is_favori(produit.id) %}text-red-500 bg-red-50{% else %}text-gray-400 hover:text-red-500 hover:bg-red-50{% endif %}"
                                        data-produit-id="{{ produit.id }}"
                                        onclick="toggleFavori({{ produit.id }}, this)"
                                        title="{% if is_favori(produit.id) %}Retirer des favoris{% else %}Ajouter aux favoris{% endif %}">
                                    <svg class="w-5 h-5" fill="{% if is_favori(produit.id) %}currentColor{% else %}none{% endif %}" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"/>
                                    </svg>
                                </button>
                            {% endif %}
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>

        <div class="mt-8 text-center">
            <p class="text-gray-600">{{ produits|length }} annonce(s) trouv√©e(s)</p>
        </div>
    {% endif %}
</div>

<!-- Container pour les notifications -->
<div id="notification-container" class="fixed top-4 right-4 z-50"></div>

<script>
// Fonction pour afficher une notification
function showNotification(message, type = 'success') {
    const container = document.getElementById('notification-container');
    const notification = document.createElement('div');
    
    const bgColor = type === 'success' ? 'bg-green-500' : 'bg-red-500';
    const icon = type === 'success' ? '‚úì' : '‚úó';
    
    notification.className = `${bgColor} text-white px-6 py-3 rounded-lg shadow-lg mb-2 transform translate-x-full transition-transform duration-300 flex items-center`;
    notification.innerHTML = `
        <span class="mr-2 font-bold text-lg">${icon}</span>
        <span>${message}</span>
    `;
    
    container.appendChild(notification);
    
    // Animation d'entr√©e
    setTimeout(() => {
        notification.classList.remove('translate-x-full');
    }, 100);
    
    // Animation de sortie et suppression
    setTimeout(() => {
        notification.classList.add('translate-x-full');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// Fonction pour basculer un favori
async function toggleFavori(produitId, buttonElement) {
    const isCurrentlyFavorite = buttonElement.classList.contains('text-red-500');
    
    // Animation de chargement
    buttonElement.disabled = true;
    buttonElement.style.transform = 'scale(0.9)';
    
    try {
        const response = await fetch(`/favoris/toggle/${produitId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        });

        const data = await response.json();
        
        if (data.success) {
            // Mettre √† jour l'apparence du bouton
            updateFavoriteButton(buttonElement, data.est_favori);
            
            // Afficher notification de succ√®s
            const message = data.est_favori ? 
                '‚ù§Ô∏è Produit ajout√© aux favoris !' : 
                'üíî Produit retir√© des favoris';
            showNotification(message, 'success');
            
            // Animation de succ√®s
            buttonElement.style.transform = 'scale(1.2)';
            setTimeout(() => {
                buttonElement.style.transform = 'scale(1)';
            }, 200);
        } else {
            showNotification(data.message || 'Erreur lors de l\'op√©ration', 'error');
            console.error('Erreur:', data.message);
        }
    } catch (error) {
        showNotification('Erreur de communication avec le serveur', 'error');
        console.error('Erreur r√©seau:', error);
    } finally {
        buttonElement.disabled = false;
    }
}

// Fonction pour mettre √† jour l'apparence du bouton favori
function updateFavoriteButton(button, isFavorite) {
    const svg = button.querySelector('svg');
    
    if (isFavorite) {
        button.className = 'favori-btn ml-2 p-2 rounded-full transition-all duration-300 text-red-500 bg-red-50';
        svg.setAttribute('fill', 'currentColor');
        button.title = 'Retirer des favoris';
    } else {
        button.className = 'favori-btn ml-2 p-2 rounded-full transition-all duration-300 text-gray-400 hover:text-red-500 hover:bg-red-50';
        svg.setAttribute('fill', 'none');
        button.title = 'Ajouter aux favoris';
    }
}
</script>
{% endblock %}
